# -*- coding: utf-8 -*-
"""Project1-DiabetesPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1919EUmEOWBmxX5FswK9M3Jt7VyVHuLF8

Name: Shri Sabhariesh. K

Dept : B.Tech AI & DS

Reg No: 727822TUAD050

SEM: 6
"""

#Name: Shri Sabhariesh K
#Dept: B.Tech AI&DS
#Reg No: 727822TUAD050
#Project 1

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler #standardizing data
from sklearn.model_selection import train_test_split #performing training test
from sklearn import svm #support vector machine
from sklearn.metrics import accuracy_score

diabetes_dataset = pd.read_csv('/content/diabetes.csv')

diabetes_dataset.head()

diabetes_dataset.shape

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 -> Non-Diabetic

1 -> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

X = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y = diabetes_dataset['Outcome']

print(X)

"""Data Standardization"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel='linear')

#training with support vector machine
classifier.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

X_train_accuracy = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_accuracy, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

X_test_prediction = classifier.predict(X_test)
test_data_score = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data :', test_data_score)

"""Making Prediction System"""

input_data = (1,89,66,23,94,28.1,0.167,21)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')